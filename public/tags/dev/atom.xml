<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>drew powers - dev</title>
	<subtitle>the personal site of drew powers</subtitle>
	<link href="https://pow.rs/tags/dev/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://pow.rs"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-09-08T00:00:00+00:00</updated>
	<id>https://pow.rs/tags/dev/atom.xml</id>
	<entry xml:lang="en">
		<title>did we fuck up the internet? part 1</title>
		<published>2020-08-26T00:00:00+00:00</published>
		<updated>2020-09-08T00:00:00+00:00</updated>
		<link href="https://pow.rs/blog/did-we-fuck-up-the-internet-pt-1/" type="text/html"/>
		<id>https://pow.rs/blog/did-we-fuck-up-the-internet-pt-1/</id>
		<content type="html">&lt;p&gt;‚ÄúLearn the fundamentals‚Äù is a common piece of advice given to beginners when starting out. And
usually for web pages, it‚Äôs some form of ‚Äúlearn HTML, CSS, and JS.‚Äù Those three will never go away,
and will outlast any flavor-of-the-month framework (but full disclosure: I actually do tell
beginners to learn a flavor-of-the-month framework because it‚Äôs motivating, it‚Äôs what gets them
hired, and you can still learn the fundamentals at the same time).&lt;&#x2F;p&gt;
&lt;p&gt;But what if the fundamentals‚Ä¶ aren‚Äôt so fundamental? What were to happen if the fundamentals
changed?&lt;&#x2F;p&gt;
&lt;p&gt;I‚Äôve never written a ‚Äúwas the internet a mistake?‚Äù blog post (it‚Äôs either a cheap laugh‚Äî‚Äúwe‚Äôre
monkeys that tricked rocks to think; we deserve what we get! ha ha‚Äù‚Äîor a bit melodramatic). But I
guess 2020 is the year I start.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;backstory-why-i-m-questioning-the-web&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#backstory-why-i-m-questioning-the-web&quot; aria-label=&quot;Anchor link for: backstory-why-i-m-questioning-the-web&quot;&gt;üîó&lt;&#x2F;a&gt;backstory: why I‚Äôm questioning the web&lt;&#x2F;h2&gt;
&lt;p&gt;When I say I‚Äôm questioning the fundamentals of the web, I basically mean the HTML&#x2F;CSS&#x2F;JS + browsers
combo. Or at least this current version of it. Part 1 (this post) will outline what led to this. The
following parts will try and soothsay a little.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-mozilla-layoffs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-mozilla-layoffs&quot; aria-label=&quot;Anchor link for: the-mozilla-layoffs&quot;&gt;üîó&lt;&#x2F;a&gt;the Mozilla layoffs&lt;&#x2F;h3&gt;
&lt;p&gt;Our journey begins with &lt;a href=&quot;https:&#x2F;&#x2F;www.theverge.com&#x2F;2020&#x2F;8&#x2F;11&#x2F;21363424&#x2F;mozilla-layoffs-quarter-staff-250-people-new-revenue-focus&quot;&gt;Mozilla laying off 25% of its staff in August 2020&lt;&#x2F;a&gt;.
Software layoffs suck in general, but they &lt;em&gt;really&lt;&#x2F;em&gt; suck when they carry global impact. An extreme
(but possible) take on the outcome is: this is the &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chriscoyier&#x2F;status&#x2F;1296573362223759361?s=20&quot;&gt;death of Firefox&lt;&#x2F;a&gt; and MDN as we know it
(&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2020&#x2F;08&#x2F;18&#x2F;laying-the-foundation-for-rusts-future.html?ref=hvper.com&quot;&gt;Rust may be OK&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;If Firefox goes, then the burden of the internet rests practically on the shoulders of Chromium (if
you‚Äôre reading this in the far future, remember that &lt;a href=&quot;https:&#x2F;&#x2F;www.theverge.com&#x2F;2019&#x2F;5&#x2F;6&#x2F;18527550&#x2F;microsoft-chromium-edge-google-history-collaboration&quot;&gt;Microsoft recently abandoned their historic
browser project in favor of Chromium&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;At worst, such monopolistic control over the internet is so dangerous it had to be held in check by
a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;United_States_v._Microsoft_Corp.&quot;&gt;2001 Supreme Court ruling&lt;&#x2F;a&gt;. At best, the responsibility of stewarding the
development of &lt;em&gt;the entire internet&lt;&#x2F;em&gt; is so monumental, it crushes any mere team of mortals tasked
with it. Either way, if Chromium is the last browser standing, it‚Äôs bad news for all.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you think the web has almost &#x27;priced itself out of the market&#x27; in terms of complexity if only
1-2 organisations are capable of building rendering engines for it?&lt;&#x2F;p&gt;
&lt;p&gt;Microsoft gave up, Mozilla will struggle as you say.&lt;&#x2F;p&gt;
&lt;p&gt;‚Äî &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;i&#x2F;status&#x2F;1296573362223759361&quot;&gt;Mike Healey on Aug 20&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I guess there‚Äôs WebKit still ü§∑‚Äç‚ôÇÔ∏è. Until Apple remembers they‚Äôre supposed to maintain it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;maybe-js-isn-t-the-answer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#maybe-js-isn-t-the-answer&quot; aria-label=&quot;Anchor link for: maybe-js-isn-t-the-answer&quot;&gt;üîó&lt;&#x2F;a&gt;maybe JS isn‚Äôt the answer&lt;&#x2F;h3&gt;
&lt;p&gt;We pause there, and join the developer discussion in another part of the dev sphere, where people
(like myself) are having existential career questions. &lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;macwright.com&#x2F;2020&#x2F;05&#x2F;10&#x2F;spa-fatigue.html&quot;&gt;Second-guessing the modern
web&lt;&#x2F;a&gt;&lt;&#x2F;em&gt; by Tom MacWright comes to mind as a post at the center of the
discussion around whether or not our current JS-heavy trajectory is healthy.&lt;&#x2F;p&gt;
&lt;p&gt;JS has always had nay-sayers. &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@ericclemmons&#x2F;javascript-fatigue-48d4011b6fc4&quot;&gt;JavaScript fatigue&lt;&#x2F;a&gt; had been questioning this direction
since 2015. And there have been no shortage of the ‚Äúget off my lawn‚Äú old guard complaining about any
attempt at replacing jQuery (&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;search?q=%40thomasfuchs%20react&amp;amp;src=typed_query&quot;&gt;link&lt;&#x2F;a&gt;). However, MacWright‚Äôs post came across as a
concerned insider rather than an outside detractor that &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;dan_abramov&#x2F;status&#x2F;1259614150386425858?s=20&quot;&gt;even got the React folk thinking&lt;&#x2F;a&gt;
(and yes, there‚Äôs a world of difference between the two).&lt;&#x2F;p&gt;
&lt;p&gt;I‚Äôd wager that if React is under question, the larger JS direction (React + webpack, built by
Node.js) is under question by extension. Of course they aren‚Äôt the same thing, but nothing has come
close to React‚Äôs popularity and staying power for the web (especially when you factor in React
Native and other targets). If React goes, there‚Äôs no clear replacement, which means further
splintering.&lt;&#x2F;p&gt;
&lt;p&gt;In rough chronological order, here are a few notable discussions&#x2F;milestones that amount to some key
players in tech all rethinking reliance in JS:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;2019: Web Components gain widespread browser support, and are basically standardized React
components, but &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Rich_Harris&#x2F;status&#x2F;1198332398561353728?s=20&quot;&gt;devs don‚Äôt like them&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;2019‚Äì2020: websites are over 2MB and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;scottjehl&#x2F;status&#x2F;1263492890979979264?s=20&quot;&gt;getting bigger&lt;&#x2F;a&gt; thanks to more JS&lt;&#x2F;li&gt;
&lt;li&gt;Apr 2020: a &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tkadlec&#x2F;status&#x2F;1252613423361376256?s=20&quot;&gt;pretty damning study of JS frameworks&lt;&#x2F;a&gt; comes out&lt;&#x2F;li&gt;
&lt;li&gt;May 2020: Tom Wright‚Äôs &lt;a href=&quot;https:&#x2F;&#x2F;macwright.com&#x2F;2020&#x2F;05&#x2F;10&#x2F;spa-fatigue.html&quot;&gt;Second-guessing the modern web&lt;&#x2F;a&gt; post&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;our-tools-are-still-fractured&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#our-tools-are-still-fractured&quot; aria-label=&quot;Anchor link for: our-tools-are-still-fractured&quot;&gt;üîó&lt;&#x2F;a&gt;our tools are (still) fractured&lt;&#x2F;h3&gt;
&lt;p&gt;From time to time we all need to step outside our bubbles (JS, Rails, PHP, etc.) and be reminded
that the web development community is (still) fractured. HTML, CSS, and JS are inadequate in their
current form, so we turn to ellaborate tools to fill in their shortcomings.&lt;&#x2F;p&gt;
&lt;p&gt;We can‚Äôt simply write HTML, so we turn to template languages: &lt;em&gt;Nunjucks&lt;&#x2F;em&gt;, &lt;em&gt;Jinja&lt;&#x2F;em&gt;, &lt;em&gt;Handlebars&lt;&#x2F;em&gt;,
&lt;em&gt;Pug&lt;&#x2F;em&gt;, and &lt;em&gt;Liquid&lt;&#x2F;em&gt;, to name only a few (there are dozens and dozens I missed). But to compile these
non-standard templates, we need a compiler that‚Äôs likely built in Ruby, Node.js, Go, Python, or
Rust, depending on our choices (and the language used has sweeping consequences).&lt;&#x2F;p&gt;
&lt;p&gt;Or perhaps you need to generate markup dynamically, in which case you‚Äôll need a server. Again you‚Äôll
have to pick a language (Ruby, Node.js, Go, PHP, Python, or Rust) as well as a framework (Rails,
Nest.js, Django, Laravel, Rocket, etc.). Your choice here will have further sweeping consequences.&lt;&#x2F;p&gt;
&lt;p&gt;And then there‚Äôs writing JS, which may or may not get types (TypeScript), and which will likely be
built in a framework (Svelte, React, Vue, Angular, etc.). All of these choices will require setting
up tooling (webpack &#x2F; Rollup &#x2F; Snowpack), as well as the connection to the server from your earlier
choices.&lt;&#x2F;p&gt;
&lt;p&gt;By now, we‚Äôve been divided and subdivided and subdivided again by our choices. I want to be clear:
I‚Äôm not at all advocating that we need to use one programming language for anything, or that
different problems need different solutions. But I am wondering why, if webpages are supposed to be
a standardized concept, there are so many splintered ways to assemble them that I fear we‚Äôre losing
knowledge (and people) in between the gaps.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;There shouldn‚Äôt be so many ways to do one standard thing.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-do-we-go-from-here&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-do-we-go-from-here&quot; aria-label=&quot;Anchor link for: where-do-we-go-from-here&quot;&gt;üîó&lt;&#x2F;a&gt;where do we go from here?&lt;&#x2F;h2&gt;
&lt;p&gt;To recap, I‚Äôm questioning current webdev practices because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;we might be back to a browser monopoly again&lt;&#x2F;li&gt;
&lt;li&gt;all of us hate writing HTML&#x2F;CSS&#x2F;JS so much we invent new ways every year to avoid it&lt;&#x2F;li&gt;
&lt;li&gt;React + Node.js bundlers are cool but didn‚Äôt live up to promises&lt;&#x2F;li&gt;
&lt;li&gt;our savior, web components, wasn‚Äôt received well (also worth mentioning it was championed by our
Chromium overlords so we‚Äôll see if they ever do anything nice for us again)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All signs that cast doubt on our current direction. But even though the future is uncertain and
there‚Äôs no clear answer to how we solve all this, we can still make some intelligent bets. So in
part 2, we‚Äôll do exactly that.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>was HTML a mistake?</title>
		<published>2020-04-19T00:00:00+00:00</published>
		<updated>2020-04-19T00:00:00+00:00</updated>
		<link href="https://pow.rs/blog/was-html-a-mistake/" type="text/html"/>
		<id>https://pow.rs/blog/was-html-a-mistake/</id>
		<content type="html">&lt;p&gt;OK, hear me out. Even if &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Betteridge%27s_law_of_headlines&quot;&gt;Betteridge is right&lt;&#x2F;a&gt; and the answer at the end of this blog
post ends up being ‚Äúno,‚Äù let‚Äôs treat the question ‚Äúwas HTML a mistake?‚Äù purely as a thought
experiment. And it may shed light on some of the more frustrating parts of making websites.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-was-html-created&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-was-html-created&quot; aria-label=&quot;Anchor link for: why-was-html-created&quot;&gt;üîó&lt;&#x2F;a&gt;why was HTML created?&lt;&#x2F;h2&gt;
&lt;figure&gt;&lt;img src=&quot;&#x2F;assets&#x2F;posts&#x2F;was-html-a-mistake&#x2F;tims_editor.gif&quot; alt=&quot;Tim Berners Lee‚Äôs WorldWideWeb (Nexus) browser editor&quot; &#x2F;&gt;&lt;figcaption&gt;Tim Berners Lee‚Äôs ‚ÄúWorldWideWeb‚Äù browser editor (1993) &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;People&#x2F;Berners-Lee&#x2F;WorldWideWeb.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;source&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;Tim Berners Lee open-sourced the first browser in 1993 as a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;WYSIWYG&quot;&gt;WYSIWYG&lt;&#x2F;a&gt; editor. So basically
an internet-connected Microsoft Word.&lt;&#x2F;p&gt;
&lt;p&gt;‚Ä¶that‚Äôs it. That‚Äôs why it was invented. To share docs with other people online. You thought there
was going to be more history to it? No; it‚Äôs not that old.&lt;&#x2F;p&gt;
&lt;p&gt;Now we‚Äôll fast-forward a few years. Please explain to me how the &lt;em&gt;fuck&lt;&#x2F;em&gt; you might accomplish
something like this in a WYSIWYG editor:&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;video autoplay=&quot;true&quot; controls muted loop playsinline width=&quot;800&quot; height=&quot;500&quot;&gt;
    &lt;source src=&quot;&#x2F;publci&#x2F;posts&#x2F;was-html-a-mistake&#x2F;rino-pelle.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
  &lt;&#x2F;video&gt;
  &lt;figcaption&gt;The actual homepage of &lt;a href=&quot;https:&#x2F;&#x2F;rino-pelle.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;rino-pelle.com&lt;&#x2F;a&gt;. An actual work of animation art that people actually made, somehow.&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;If your answer is ‚Äúthat looks hard to do,‚Äù you are absolutely correct. It‚Äôs &lt;em&gt;hard&lt;&#x2F;em&gt; trying to trick
HTML a.k.a. ‚ÄúMicrosoft Word Online‚Äù into doing something this awesome.&lt;&#x2F;p&gt;
&lt;p&gt;I, too, bemoan the fact that the &lt;a href=&quot;https:&#x2F;&#x2F;httparchive.org&#x2F;reports&#x2F;page-weight&quot;&gt;average website today weighs &lt;code&gt;2 MB&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. And it‚Äôs easy
to blame JavaScript, or images, or whatever for that weight. But we‚Äôre fooling ourselves if we think
we can achieve üëÜ in under &lt;code&gt;2 MB&lt;&#x2F;code&gt; with our current tools (Rino &amp;amp; Pelle, since you‚Äôre wondering, is
&lt;code&gt;1.87 MB&lt;&#x2F;code&gt; gzipped, unpacking to &lt;code&gt;2.07 MB&lt;&#x2F;code&gt;‚Äîpretty close to average, wouldn‚Äôt ya say?).&lt;&#x2F;p&gt;
&lt;p&gt;If the weight of the average website comes from lobbing enough JS at the DOM until we trick it into
animating, we have 2 paths forward to solve this: either we ditch the JS frameworks and revert the
web into mostly static documents like &lt;em&gt;The Good Lee&lt;&#x2F;em&gt; intended. Or we don‚Äôt use HTML &amp;amp; JS and serve
something compiled instead.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;if-not-html-then-what&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-not-html-then-what&quot; aria-label=&quot;Anchor link for: if-not-html-then-what&quot;&gt;üîó&lt;&#x2F;a&gt;if not HTML, then what?&lt;&#x2F;h2&gt;
&lt;p&gt;Once upon a time, long before Apple made decisions about the internet, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Adobe_Flash&quot;&gt;Flash&lt;&#x2F;a&gt; existed. And
it was great. Flash was the defacto way you made cool, rich, interactive experiences. It not only
delivered futuristic, fun, imaginative, and creative interfaces, it did so on a budget, back in the
days of dial-up. On computers that had &lt;em&gt;way&lt;&#x2F;em&gt; less memory and resources than our phones do now.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;div class=&quot;post-yt&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;UHbQmqmmIFk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;
  &lt;figcaption&gt;The &lt;strong&gt;2Advanced&lt;&#x2F;strong&gt; site in 2001, the gold standard for cutting-edge web design at the time&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;I‚Äôm not saying that Flash itself was the pinnacle of what the web could be, no. There were reasons
for its demise, and it did compromise a core principle of the web: &lt;em&gt;openness&lt;&#x2F;em&gt; (it not only had
critical security issues; it was proprietary technology owned by a private corporation and thus not
a web standard). Still, you have to give Flash credit for giving us the the most imaginative
interfaces we‚Äôve ever seen outside of sci-fi films.&lt;&#x2F;p&gt;
&lt;p&gt;I‚Äôll summarize our journey up to this point in a few true, albeit conflicting, statements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;HTML was invented primarily for &lt;strong&gt;text documents&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;HTML was &lt;strong&gt;not designed&lt;&#x2F;strong&gt; to be highly-interactive&lt;&#x2F;li&gt;
&lt;li&gt;Full rendering control is best done in a &lt;strong&gt;compiled native application&lt;&#x2F;strong&gt;, like Flash or a
video¬†game&lt;&#x2F;li&gt;
&lt;li&gt;Compiled applications are &lt;strong&gt;closed-source&lt;&#x2F;strong&gt; experiences that violate key principles of the
internet‚Äôs open, safe design.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So how do we reconcile this‚Äîhow do we have our cake and eat it too?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;html5-canvas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#html5-canvas&quot; aria-label=&quot;Anchor link for: html5-canvas&quot;&gt;üîó&lt;&#x2F;a&gt;‚Ä¶HTML5 canvas?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Canvas_API&quot;&gt;HTML5 canvas&lt;&#x2F;a&gt; is a pretty-darn smart spec. It leverages CPU &amp;amp; GPU efficiently for
rendering, has an OK-ish footprint, and &lt;strong&gt;keeps the source open&lt;&#x2F;strong&gt;. Mind you, it‚Äôll never replace
native code, but it‚Äôs essentially the correct answer to all the above problems‚Äîit lets us deliver
rich, interactive experiences for the web without compromising security or openness.&lt;&#x2F;p&gt;
&lt;p&gt;But to our earlier point, &lt;strong&gt;canvas isn‚Äôt typically smaller than HTML,&lt;&#x2F;strong&gt; so that‚Äôs a dead-end
already. Even if it makes animating &amp;amp; rendering &lt;em&gt;easier and more fun&lt;&#x2F;em&gt;, it‚Äôs still JavaScript, except
you have to build your rendering tools from scratch compared to HTML + CSS.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;video autoplay=&quot;true&quot; controls muted loop playsinline width=&quot;800&quot; height=&quot;500&quot;&gt;
    &lt;source src=&quot;&#x2F;assets&#x2F;posts&#x2F;was-html-a-mistake&#x2F;zoomquilt.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
  &lt;&#x2F;video&gt;
  &lt;figcaption&gt;Zoomquilt, the greatest Flash experiment ever made, was &lt;a href=&quot;https:&#x2F;&#x2F;zoomquilt.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;revived in HTML5 canvas form!&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;Full disclosure: I know this isn‚Äôt 100% relevant to this post, but when am I going to get another opportunity to reminisce about Zoomquilt?&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;But let‚Äôs assume (thought experiment) there &lt;em&gt;was&lt;&#x2F;em&gt; a way to render crazy-awesome experiences with
canvas, and it was faster, lighter, and better all-around than HTML. We &lt;em&gt;still&lt;&#x2F;em&gt; couldn‚Äôt switch to a
canvas-dominated internet because &lt;strong&gt;it‚Äôs not screen reader-friendly&lt;&#x2F;strong&gt; (unless you &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;meusPartum&#x2F;status&#x2F;1143186195494658048?s=20&quot;&gt;use HTML as a
base and overlay canvas on top&lt;&#x2F;a&gt;). That would mean most of the internet would be
unreachable to people with visual impairments. Just how many sites &lt;em&gt;is&lt;&#x2F;em&gt; that?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-web-now-what-will-it-be&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-web-now-what-will-it-be&quot; aria-label=&quot;Anchor link for: what-is-the-web-now-what-will-it-be&quot;&gt;üîó&lt;&#x2F;a&gt;what is the web now? what will it be?&lt;&#x2F;h2&gt;
&lt;p&gt;For as many statistical reports as I read, like ‚Äúthe average weight of websites‚Äù and ‚Äúyour users are
all using mobile phones‚Äù and ‚Äúvideo is the way to market‚Äù (&lt;a href=&quot;https:&#x2F;&#x2F;www.theverge.com&#x2F;2018&#x2F;10&#x2F;17&#x2F;17989712&#x2F;facebook-inaccurate-video-metrics-inflation-lawsuit&quot;&gt;debunked&lt;&#x2F;a&gt;, BTW), I can‚Äôt
remember reading a report that summarized &lt;strong&gt;breakdown of the internet by industry.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As of Apr 2020, there are an estimated &lt;strong&gt;1.7 billion websites&lt;&#x2F;strong&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;www.internetlivestats.com&#x2F;&quot;&gt;Internet Live Stats&lt;&#x2F;a&gt;) online.
Assuming that‚Äôs true‚Ä¶&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If there are &lt;a href=&quot;https:&#x2F;&#x2F;growthbadger.com&#x2F;blog-stats&#x2F;&quot;&gt;&lt;strong&gt;600 million&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; blogs (most of which are on
Tumblr), that would mean blogs make up &lt;strong&gt;35% of websites&lt;&#x2F;strong&gt; (&lt;em&gt;this is moving fast‚Äîonly 65% to
go!&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Thanks to monopolistic mergers and acquisitions, there are only a handful of popular social media
sites, so that‚Äôs only, like, what? 10? 15?&lt;&#x2F;li&gt;
&lt;li&gt;There are also a countable number of video&#x2F;entertainment websites that serve online content, too
(probably about 100 or so, counting the naughty stuff)‚Ä¶ but we‚Äôre still probably at &lt;strong&gt;35%&lt;&#x2F;strong&gt;
(&lt;em&gt;shoot; what are the rest?&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;If &lt;a href=&quot;https:&#x2F;&#x2F;clutch.co&#x2F;website-builders&#x2F;resources&#x2F;small-business-websites-2018&quot;&gt;&lt;strong&gt;64%&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; of small businesses have a website, and there are‚Ä¶¬†uh‚Ä¶ hm. I have no idea how
many businesses there are on Earth. At least 1%‚Äì65% of websites according to my estimates.&lt;&#x2F;li&gt;
&lt;li&gt;If &lt;a href=&quot;https:&#x2F;&#x2F;w3techs.com&#x2F;&quot;&gt;WordPress powers 35% of all websites&lt;&#x2F;a&gt;, and WordPress sites mean blogs, editorial sites,
and business sites‚Ä¶ wait that overlaps with ‚Äúblogs‚Äù above doesn‚Äôt it? Crap.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I honestly have no idea what the internet is made up of ü§∑‚Äç‚ôÇÔ∏è, but we can make some sweeping
generalizations.&lt;&#x2F;p&gt;
&lt;p&gt;Going by &lt;em&gt;quantity&lt;&#x2F;em&gt; (sheer number of websites), I would guess it‚Äôs mostly blogs + brochure websites
(businesses, restaurants, etc.). The vast majority of these are text-based (HTML).&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to &lt;em&gt;bandwidth&lt;&#x2F;em&gt;, the data seems to point toward video content (Netflix, YouTube, etc.)
And video doesn‚Äôt apply to our current convo.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to &lt;em&gt;users‚Äô time spent online&lt;&#x2F;em&gt;, a good amount is spent on the major social networking
sites like &lt;em&gt;Instagram&lt;&#x2F;em&gt;, &lt;em&gt;Twitter&lt;&#x2F;em&gt;, &lt;em&gt;TikTok&lt;&#x2F;em&gt;, etc. And that‚Äôs a mixture of video and text.&lt;&#x2F;p&gt;
&lt;p&gt;So all that to say, while it‚Äôs hard (impossible?) to give an accurate number of the web that must be
screen-reader friendly, and thus text-based, it‚Äôs safe to say ‚Äúmost.‚Äù And if screen reader support
is essential for most of the internet, &lt;strong&gt;HTML is still the best foundation we have.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-betteridge-was-right-then-html-wasn-t-a-mistake&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#so-betteridge-was-right-then-html-wasn-t-a-mistake&quot; aria-label=&quot;Anchor link for: so-betteridge-was-right-then-html-wasn-t-a-mistake&quot;&gt;üîó&lt;&#x2F;a&gt;‚Ä¶so Betteridge was right, then? HTML wasn‚Äôt a mistake?&lt;&#x2F;h2&gt;
&lt;p&gt;Lately I‚Äôve been spending more time with compiled languages (like Rust‚Äîwhich was used to make this
blog!) and loving them. And I wish we could make the internet more efficient by compiling more (I
know WebAssembly exists, but that‚Äôs not going to replace the DOM). Maybe the love affair the
internet had with its biggest compiled language to-date, Flash, had its heyday and it‚Äôs time to move
on. Maybe canvas is neat, but shouldn‚Äôt upend HTML as the &lt;em&gt;lingua franca&lt;&#x2F;em&gt; of the web.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe there‚Äôs something better on the horizon‚Äîbut I don‚Äôt know what, or how it‚Äôll give us everything
HTML, CSS, and JS does in a smaller package‚Äîbut maybe we can serve the same creative, accessible
internet in under &lt;code&gt;2 MB&lt;&#x2F;code&gt; per page.&lt;&#x2F;p&gt;
&lt;p&gt;Until then, &lt;strong&gt;HTML appears to still be the best delivery method for serving text-based content.&lt;&#x2F;strong&gt;
But it doesn‚Äôt mean I have to enjoy animating it. And you can bet your bippy if I don‚Äôt need screen
reader support I‚Äôm going to be doing some &lt;a href=&quot;https:&#x2F;&#x2F;js1k.com&#x2F;2019-x&#x2F;demo&#x2F;4130&quot;&gt;fun stuff in canvas&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>JavaScript&#x27;s greatest revolution was too¬†quiet</title>
		<published>2020-03-08T00:00:00+00:00</published>
		<updated>2020-04-21T00:00:00+00:00</updated>
		<link href="https://pow.rs/blog/the-state-of-es-modules-in-2020/" type="text/html"/>
		<id>https://pow.rs/blog/the-state-of-es-modules-in-2020/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;In 2019, a revolution happened in JS.&lt;&#x2F;strong&gt; You may have missed it. All &lt;a href=&quot;https:&#x2F;&#x2F;caniuse.com&#x2F;#feat=es6-module&quot;&gt;major browsers&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@nodejs&#x2F;announcing-core-node-js-support-for-ecmascript-modules-c5d6dc29b663&quot;&gt;Node.js&lt;&#x2F;a&gt; added native support for ES Modules (ESM)‚Äîno Babel, transpiling,
preprocessing, or trickery needed.&lt;&#x2F;p&gt;
&lt;p&gt;If you‚Äôve written JavaScript in the time before React &amp;amp; webpack, you remember how much of a mess it
was without &lt;code&gt;import&lt;&#x2F;code&gt; or &lt;code&gt;require()&lt;&#x2F;code&gt;. You had to be intimately familiar with &lt;code&gt;this&lt;&#x2F;code&gt; and lexical
scoping, otherwise it‚Äôd come back to bite you. All JS having global scope (even vendor scripts) was
&lt;em&gt;hard&lt;&#x2F;em&gt; to do well, which often meant you limited its reach. JavaScript was maligned in other
programming communities for the things it lacked compared to more mature languages, chiefly of all,
a module system.&lt;&#x2F;p&gt;
&lt;p&gt;That changed in 2019, when the ESM proposal became a reality, not something that only lived in the
make-believe world of webpack &amp;amp; Babel. JavaScript &lt;em&gt;finally&lt;&#x2F;em&gt; got the thing everyone had been asking
for.&lt;&#x2F;p&gt;
&lt;p&gt;So why didn‚Äôt more people notice?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-land-of-make-believe&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-land-of-make-believe&quot; aria-label=&quot;Anchor link for: the-land-of-make-believe&quot;&gt;üîó&lt;&#x2F;a&gt;the land of make-believe&lt;&#x2F;h2&gt;
&lt;p&gt;In preparing &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Sn2e62CZ41g&quot;&gt;for a talk I gave&lt;&#x2F;a&gt; last year, I realized just how much JS has changed over
the last decade. Node.js was released in 2010 with the CommonJS module system, and as a result, npm.
That‚Äôs over 10 years of CommonJS we‚Äôve been writing, and we‚Äôre not slowing down there (if this is
all mumbo-jumbo to you, hopefully &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Sn2e62CZ41g&quot;&gt;my talk&lt;&#x2F;a&gt; will help).&lt;&#x2F;p&gt;
&lt;p&gt;In the land of Node, we got Gulp, Grunt, Babel, webpack, Browserify, and Rollup. These are all tools
that fundamentally changed how we wrote JS. And they all, in their own unique ways, compensated for
JS‚Äô lack of a module system. Gulp and Grunt gave you more tools to invent your own bundle, whereas
Browserify and webpack embraced the idea of a JS module system by completely simulating it, and
abstracting it away from you. Babel made everything possible.&lt;&#x2F;p&gt;
&lt;p&gt;But the point is: all of these tools over the past 10 years created a land of make-believe that JS
itself (or browsers) didn‚Äôt support. This wasn‚Äôt a bad thing, as it let us code more, faster, and we
got to stress-test the future before actually arriving‚Äîall good things.&lt;&#x2F;p&gt;
&lt;p&gt;But now we don‚Äôt need it anymore, and it‚Äôs hard to change everything and start over again. And
perhaps that fear of starting over‚Äîagain‚Äîhas kept us from recognizing the exciting new future. Yet
we must move forward.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-switch-to-esm&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-switch-to-esm&quot; aria-label=&quot;Anchor link for: why-switch-to-esm&quot;&gt;üîó&lt;&#x2F;a&gt;why switch to ESM&lt;&#x2F;h2&gt;
&lt;p&gt;So, why switch to ESM? What do we stand to gain by changing everything?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;universal-js&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#universal-js&quot; aria-label=&quot;Anchor link for: universal-js&quot;&gt;üîó&lt;&#x2F;a&gt;universal JS&lt;&#x2F;h3&gt;
&lt;p&gt;The same JavaScript you write for the browser, works in the server. While that was the &lt;em&gt;promise&lt;&#x2F;em&gt; of
Node.js, over time it‚Äôs shifted away from ECMAScript to become its own language. ESM would bring
everything back under one roof again.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;remote-imports&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#remote-imports&quot; aria-label=&quot;Anchor link for: remote-imports&quot;&gt;üîó&lt;&#x2F;a&gt;remote imports&lt;&#x2F;h3&gt;
&lt;p&gt;This is &lt;em&gt;huge&lt;&#x2F;em&gt;. We can import any module from anywhere on the internet, and &lt;strong&gt;are no longer bound to
npm.&lt;&#x2F;strong&gt; Consider &lt;a href=&quot;https:&#x2F;&#x2F;deno.land&#x2F;&quot;&gt;Deno&lt;&#x2F;a&gt;, a new V8&#x2F;Rust&#x2F;Tokio runtime that might replace Node.js. This is a line
from the &lt;a href=&quot;https:&#x2F;&#x2F;deno.land&#x2F;std&#x2F;manual.md#introduction&quot;&gt;docs&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Comparison to Node.js&lt;&#x2F;strong&gt;&lt;br&#x2F;&gt; Deno does not use &lt;code&gt;npm&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This single, understated line is a huge shift. How can you just‚Ä¶ &lt;em&gt;move away&lt;&#x2F;em&gt; from the most popular
package repository in history? Well thanks to ESM, you can load modules from any URL, whether that
be locally, or a CDN. &lt;code&gt;npm install&lt;&#x2F;code&gt; is now no longer needed; the language itself supports
cross-domain modules!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-bundling-or-transpilation-needed&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#no-bundling-or-transpilation-needed&quot; aria-label=&quot;Anchor link for: no-bundling-or-transpilation-needed&quot;&gt;üîó&lt;&#x2F;a&gt;no bundling or transpilation needed&lt;&#x2F;h3&gt;
&lt;p&gt;Imagine a world where you don‚Äôt need to run any CLI command whatsoever to start a front-end
application. No runtime, webpack, build times‚Ä¶ &lt;em&gt;nothing&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To learn more about this, check out &lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;pika&#x2F;a-future-without-webpack-ago&quot;&gt;A future without webpack&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;near-perfect-caching&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#near-perfect-caching&quot; aria-label=&quot;Anchor link for: near-perfect-caching&quot;&gt;üîó&lt;&#x2F;a&gt;near-perfect caching&lt;&#x2F;h3&gt;
&lt;p&gt;In the webpack world before ESM, you had to make trade-offs: rolling everything into one giant
bundle meant no load times after initializing, but that initial download is brutal. Conversely,
‚Äúcode splitting‚Äù into tiny chunks made each chunk easily-downloadable but code is almost certainly
duplicated across those chunks and a user will be paying for the same weight over and over again (ü§î
not entirely unlike buying a home with cash or paying it off over 30 years, now that I think about
it).&lt;&#x2F;p&gt;
&lt;p&gt;With ESM, the entire dependency tree is exposed to the browser, so the browser can perfectly cache
what it needs, and nothing more (imagine if you paid nothing on your home to start, zero interest
ever, and you only paid for the parts of the home you used, as you used them). Of course, &lt;em&gt;cache
invalidation&lt;&#x2F;em&gt; is a separate problem that will be with us until the end of time. But that aside, ESM
truly is the perfect caching story for JS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-the-switch&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#making-the-switch&quot; aria-label=&quot;Anchor link for: making-the-switch&quot;&gt;üîó&lt;&#x2F;a&gt;making the switch&lt;&#x2F;h2&gt;
&lt;p&gt;So let‚Äôs say you‚Äôre sold on ESM‚Ä¶ how do you make the leap? Well, it may be your tools that are to
blame:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React:&lt;&#x2F;strong&gt; doesn‚Äôt ship an ESM-ready package (as of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;react&#x2F;issues&#x2F;11503&quot;&gt;Mar 2020&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;npm:&lt;&#x2F;strong&gt; &lt;code&gt;&amp;lt; 8%&lt;&#x2F;code&gt; of npm packages &lt;a href=&quot;https:&#x2F;&#x2F;www.pika.dev&#x2F;about&#x2F;stats&quot;&gt;ship ESM&lt;&#x2F;a&gt; (as of &lt;a href=&quot;https:&#x2F;&#x2F;www.pika.dev&#x2F;about&#x2F;stats&quot;&gt;Oct 2019&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Node.js:&lt;&#x2F;strong&gt; though it supports ESM, it‚Äôs not in a stable LTS release yet (as of &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@nodejs&#x2F;announcing-core-node-js-support-for-ecmascript-modules-c5d6dc29b663&quot;&gt;Nov
2019&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;webpack&lt;&#x2F;strong&gt;: can‚Äôt ship your code as ESM, nor can it take advantage of ESM features like remote
imports.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By choosing these tools even in new projects, you‚Äôre shipping legacy code that already has a limited
lifespan. But some of that isn‚Äôt within your control, sure‚Äîmaybe your company, or client demands
these. Or you just can‚Äôt accomplish what you need to with alternatives; that‚Äôs understandable.&lt;&#x2F;p&gt;
&lt;p&gt;But there are also some new, exciting projects on the horizon that are shaping up to replace
now-legacy CommonJS tools:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;snowpack&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#snowpack&quot; aria-label=&quot;Anchor link for: snowpack&quot;&gt;üîó&lt;&#x2F;a&gt;Snowpack&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snowpack.dev&#x2F;&quot;&gt;Snowpack&lt;&#x2F;a&gt; (a play on ‚Äùno pack‚Äù) is an install tool (disclosure: that I‚Äôm one of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pikapkg&#x2F;snowpack&#x2F;graphs&#x2F;contributors&quot;&gt;lead
contributers for&lt;&#x2F;a&gt;) that lets you ship ESM-ready code straight to the browser
&lt;strong&gt;and&lt;&#x2F;strong&gt; use npm. You can &lt;code&gt;npm install&lt;&#x2F;code&gt; like normal, and lets you use Preact, Vue, Svelte, and more
but with &lt;strong&gt;zero build time&lt;&#x2F;strong&gt; and &lt;strong&gt;no configuration.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snowpack.dev&#x2F;&quot;&gt;snowpack.dev&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pika-cdn&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pika-cdn&quot; aria-label=&quot;Anchor link for: pika-cdn&quot;&gt;üîó&lt;&#x2F;a&gt;Pika CDN&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pika.dev&#x2F;registry&quot;&gt;Pika Registry&lt;&#x2F;a&gt; does all the work of finding ESM-ready packages for you. Search for
any keyword like you would on npm, except Pika Registry can tell you instantly whether or not that
package supports ESM.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pika.dev&#x2F;registry&quot;&gt;pika.dev&#x2F;registry&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deno&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#deno&quot; aria-label=&quot;Anchor link for: deno&quot;&gt;üîó&lt;&#x2F;a&gt;Deno&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;deno.land&#x2F;&quot;&gt;Deno&lt;&#x2F;a&gt; is a new competitor to Node.js, built with V8, Rust, and Tokio and features native
TypeScript and ESM support out-of-the-box. Its guiding principle is to more closely mirror
ECMAScript in the areas where Node departed, principally only allowing ESM rather than CommonJS.
Though the project is in beta, it‚Äôs already gathering community attention and shows tons of promise.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;deno.land&#x2F;&quot;&gt;deno.land&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To recap, the current state of ESM in 2020 is: &lt;strong&gt;it‚Äôs ready to use everywhere,&lt;&#x2F;strong&gt; but &lt;strong&gt;it‚Äôs up to
you to opt-in!&lt;&#x2F;strong&gt; Give some of the new ESM tools a try, and you might find yourself dealing with less
tooling, less configuration, and other great benefits while helping the community at large unify
around ESM.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>the great(er) divide in front-end</title>
		<published>2020-02-17T00:00:00+00:00</published>
		<updated>2020-04-19T00:00:00+00:00</updated>
		<link href="https://pow.rs/blog/3-pillars-of-front-end-knowledge/" type="text/html"/>
		<id>https://pow.rs/blog/3-pillars-of-front-end-knowledge/</id>
		<content type="html">&lt;p&gt;It‚Äôs been about a year since Chris Coyier‚Äôs post &lt;a href=&quot;https:&#x2F;&#x2F;css-tricks.com&#x2F;the-great-divide&#x2F;&quot;&gt;&lt;em&gt;The Great Divide&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; came out. The
‚Äúdivide,‚Äù of course, being between 2 armies within front-end development that had been forming:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;On one side, an army of developers whose interests, responsibilities, and skill sets are heavily
revolved around JavaScript. On the other, an army of developers whose interests, responsibilities,
and skill sets are focused on other areas of the front end, like HTML, CSS, design, interaction,
patterns, accessibility, etc.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you‚Äòre unfamiliar with what he‚Äôs talking about, I‚Äôd read that post, but a quick-and-dirty history
of front-end is that it‚Äôs a profession that was once a league of ex-designers muddling their way
through code, that‚Äôs recently transformed into a proper programming discipline (with some design
skills remaining a part of the job requirement). Chris‚Äô post is somewhat of a flag post marking that
slow, subtle shift that had been happening in the profession for years.&lt;&#x2F;p&gt;
&lt;p&gt;My initial reaction to this was to reject it‚Äînot that the divide wasn‚Äòt happening, but the idea that
these should be 2 different professions. To be blunt, I saw it as someone who made their career on
CSS attacking the good work that JavaScript folks had been doing because it threatened his career (I
say that as someone respects Chris immensely, but people are allowed to be wrong in blog posts). I
even wrote an earlier draft of this post arguing that there‚Äôs no divide; that‚Äôs just how front-end
&lt;em&gt;is&lt;&#x2F;em&gt; now. Get used to it. &lt;em&gt;Git gud&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I now don‚Äôt see it that way, and I think Chris (rightly) was just pointing out a concern that he had
about this divide forming.&lt;&#x2F;p&gt;
&lt;p&gt;As a result, I began to recognize my own limitations. I saw myself as someone that was good at both
CSS and JS. But if I‚Äôm being honest, I‚Äôm not &lt;em&gt;that&lt;&#x2F;em&gt; good at CSS; I just am good &lt;em&gt;enough&lt;&#x2F;em&gt; at design
where it seems like I am. I‚Äôm also not &lt;em&gt;that&lt;&#x2F;em&gt; good at JS, as someone without a Computer Science
background, I am not the master architect that well-educated CS students tend to be (to be clear‚ÄîI‚Äôm
strongly in the ‚Äúyou don‚Äôt need a degree to be a dev‚Äù camp as a member myself, but there is
nonetheless a value in a CS education that I do not possess).&lt;&#x2F;p&gt;
&lt;p&gt;In short, the past couple months have been me coming to terms with not being able to do it all. And
do it all well.&lt;&#x2F;p&gt;
&lt;p&gt;But all that musing aside, the core content of this blog post hasn‚Äôt changed, because it was drafted
from notes I wrote to a coworker wanting to learn more about front-end, and as I was ennumerating
all there is to learn today I noticed the knowledge started to pool into 3 rough areas of expertise,
which I still stand by. &lt;em&gt;Will these become 3 different jobs eventually?&lt;&#x2F;em&gt; I don‚Äôt know. The older I
get the less I‚Äôm sure of. But I do know that each of these groups are substantial learning efforts
each their own, and I do now think it‚Äôs impossible to master all three of them.&lt;&#x2F;p&gt;
&lt;p&gt;Treat this like a DnD skill tree or something‚Äîup to you to spread points evenly or be a glass cannon
in one.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;snowdart-i-browser-apis-rendering-html-css&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#snowdart-i-browser-apis-rendering-html-css&quot; aria-label=&quot;Anchor link for: snowdart-i-browser-apis-rendering-html-css&quot;&gt;üîó&lt;&#x2F;a&gt;üë®‚Äçüé® I. Browser APIs &amp;amp; Rendering (HTML&#x2F;CSS)&lt;&#x2F;h2&gt;
&lt;p&gt;The area of expertise of Browser APIs &amp;amp; Rendering revolves around two central questions: &lt;strong&gt;On the
web, how do I make things look like things?&lt;&#x2F;strong&gt; and &lt;strong&gt;How does a browser work to help me accomplish
this?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;At beginner levels, browser rendering involves understanding the fundamentals of HTML &amp;amp; CSS to get
code to look like a design. At intermediate levels, this gets into animations, render profiling, and
making interactive things perform adequately in a browser environment. At the highest levels,
mastery of browser rendering means being able to describe in great detail how assets are requested
and the priority of their loading, the browser paint API, and how to render anything‚Äîeven 3D‚Äîat 60
frames per second (the &lt;a href=&quot;https:&#x2F;&#x2F;dassur.ma&#x2F;things&#x2F;120fps&#x2F;&quot;&gt;maximum a browser will allow&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;For the traditional CS student, the browser is something that often gets underestimated. This
results in the common ‚ÄúI don‚Äôt understand CSS‚Äù state of confusion that so many backend developers
find themselves in. And it &lt;em&gt;is&lt;&#x2F;em&gt; confusing, until you treat the browser as the special, weird runtime
environment that it is. Often times it‚Äôs what you‚Äôre fighting with here‚Äîyour own misconceptions of
what the browser is doing.&lt;&#x2F;p&gt;
&lt;p&gt;Take the following with a grain of salt, but here is roughly how you might track growth of your
knowledge in this area:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;beginner&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#beginner&quot; aria-label=&quot;Anchor link for: beginner&quot;&gt;üîó&lt;&#x2F;a&gt;Beginner&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Skill&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Example&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Fundamentals of HTML&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand what different HTML tags do&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Fundamentals of CSS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand how to use &amp;amp; apply CSS to HTML to style pages&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Fundamentals of Browser Resources&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand where to put CSS &amp;amp; JS files and reference them in the HTML for them to show up&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;intermediate&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#intermediate&quot; aria-label=&quot;Anchor link for: intermediate&quot;&gt;üîó&lt;&#x2F;a&gt;Intermediate&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Skill&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Example&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Accessibility&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can ensure sites are usable for people that use screen readers and other assistive technologies&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Animations&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can animate objects using either &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;CSS_Animations&#x2F;Using_CSS_animations&quot;&gt;CSS&lt;&#x2F;a&gt; or a JavaScript framework like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mrdoob&#x2F;three.js&#x2F;&quot;&gt;Three.js&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Hardware acceleration&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand certain properties &amp;amp; animations can &lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2016&#x2F;12&#x2F;gpu-animation-doing-it-right&#x2F;&quot;&gt;use the GPU&lt;&#x2F;a&gt; for performance&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Render profiling¬≤&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can use tools like &lt;a href=&quot;https:&#x2F;&#x2F;pow.rs&#x2F;blog&#x2F;3-pillars-of-front-end-knowledge&#x2F;lighthouse&quot;&gt;Lighthouse&lt;&#x2F;a&gt; to understand what is slowing down browser rendering &amp;amp; performance&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Image formats&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand when to use each image format (&lt;code&gt;JPG&lt;&#x2F;code&gt;, &lt;code&gt;PNG&lt;&#x2F;code&gt;, &lt;code&gt;WebP&lt;&#x2F;code&gt;, ‚Ä¶), and how to &lt;a href=&quot;http:&#x2F;&#x2F;imageoptim.com&#x2F;&quot;&gt;optimize them&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Common Browser API knowledge&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand common &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&quot;&gt;browser APIs&lt;&#x2F;a&gt; like &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Fetch_API&quot;&gt;&lt;code&gt;fetch&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;History_API&quot;&gt;&lt;code&gt;history&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and know when to leverage the browser and when to write my own JavaScript&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;master&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#master&quot; aria-label=&quot;Anchor link for: master&quot;&gt;üîó&lt;&#x2F;a&gt;Master&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Skill&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Example&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Resource prioritization¬≤ ¬≥&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;performance&#x2F;resource-prioritization&quot;&gt;resource prioritization&lt;&#x2F;a&gt; and the steps from streaming initial HTML payload, to fetching the resources, to rendering them in priority order&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Render debugging¬≤&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand how the browser performs &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;performance&#x2F;rendering&#x2F;simplify-paint-complexity-and-reduce-paint-areas&quot;&gt;paint operations&lt;&#x2F;a&gt; and how to optimize them&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Comprehensive Browser API Knowledge¬≤&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand more invisible APIs like &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;WebGL_API&quot;&gt;WebGL&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;CSS_Painting_API&quot;&gt;Paint&lt;&#x2F;a&gt;, and the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Document_Object_Model&quot;&gt;DOM&lt;&#x2F;a&gt; and understand how they differ or can work in sync to render parts of a page&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Browser processes&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand the &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;updates&#x2F;2018&#x2F;09&#x2F;inside-browser-part2&quot;&gt;Browser, Renderer, and GPU processes&lt;&#x2F;a&gt; that lie underneath the higher-level APIs&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;em&gt;¬≤ related to II &#x2F; ¬≥ related to II&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You may find that much of the ‚ÄúCSS Dev‚Äù from the &lt;em&gt;Great Divide&lt;&#x2F;em&gt; post fits in here, with the addition
of JavaScript like &lt;code&gt;fetch&lt;&#x2F;code&gt; and &lt;code&gt;history&lt;&#x2F;code&gt;, and the omission of CSS frameworks like &lt;a href=&quot;http:&#x2F;&#x2F;smacss.com&#x2F;&quot;&gt;SMACSS&lt;&#x2F;a&gt;.
So already we‚Äôre breaking up that division! As for CSS framework knowledge, that fits more neatly
in‚Ä¶&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ok-wommicroscope-ii-js-programming-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ok-wommicroscope-ii-js-programming-architecture&quot; aria-label=&quot;Anchor link for: ok-wommicroscope-ii-js-programming-architecture&quot;&gt;üîó&lt;&#x2F;a&gt;üë©‚Äçüî¨ II. JS Programming &amp;amp; Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;The knowledge of JavaScript &amp;amp; Architecture is the recent development of front-end into a more
formal, proper software environment from web dev‚Äôs &lt;em&gt;laissez-faire&lt;&#x2F;em&gt; ‚Äújust throw that code anywhere‚Äù
beginnings. This roughly correlates with the JavaScript-oriented type in Chris‚Äô post somewhat, and
is closer to the comfort sphere of a traditional Computer Science education. Whereas Camp 1 trends
toward static display, Camp 2 adds dynamism, automation, and interaction. You could even call this
‚Äúthe backend of front-end.‚Äù&lt;&#x2F;p&gt;
&lt;p&gt;This area of knowledge is concerned with &lt;strong&gt;How should this application be interacted with?&lt;&#x2F;strong&gt; and
&lt;strong&gt;How should code for the front-end be organized for delivery and team maintainability?&lt;&#x2F;strong&gt; The
pursuit of these 2 questions, together, have led to many milestones such as that React thing you‚Äôve
heard so much about (along with Node.js, which we‚Äôll cover more in the last section).&lt;&#x2F;p&gt;
&lt;p&gt;Though JavaScript is one of the most popular programming ecosystems, it‚Äôs still developing. And for
that reason I don‚Äôt feel comfortable dividing intermediate- and master-level topics. Everyone‚Äôs
journey through here will differ, and for that reason, I only distinguish between basics and
non-basics.&lt;&#x2F;p&gt;
&lt;p&gt;In your rebuttal of this blog post, please be gentle with this section ;)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;beginner-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#beginner-1&quot; aria-label=&quot;Anchor link for: beginner-1&quot;&gt;üîó&lt;&#x2F;a&gt;Beginner&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Skill&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Example&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Fundamentals of JavaScript&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can build basic things with vanilla¬†JS and don‚Äôt always need a library (only sometimes)&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;JavaScript quirks&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand the basics of &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Guide&#x2F;Working_with_Objects&quot;&gt;working with objects&lt;&#x2F;a&gt; in JS, the basics of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getify&#x2F;You-Dont-Know-JS&#x2F;blob&#x2F;2nd-ed&#x2F;objects-classes&#x2F;ch1.md&quot;&gt;&lt;code&gt;this&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and a rough understanding of scopes&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Async knowledge&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand the basics of &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Promise&quot;&gt;&lt;code&gt;Promise()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and can write code to fetch remote data (AJAX) or deal with async operations&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Fundamentals of Frameworks¬≥&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand how to spin up a React &#x2F; Vue &#x2F; Svelte &#x2F; whatever project and get something visible&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Fundamentals of CSS organization¬π&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I have some basic strategies to organize styles, whether that‚Äôs a methodology like &lt;a href=&quot;http:&#x2F;&#x2F;smacss.com&#x2F;&quot;&gt;SMACSS&lt;&#x2F;a&gt; or a utility like &lt;a href=&quot;https:&#x2F;&#x2F;tailwindcss.com&quot;&gt;Tailwind&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;intermediate-master&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#intermediate-master&quot; aria-label=&quot;Anchor link for: intermediate-master&quot;&gt;üîó&lt;&#x2F;a&gt;Intermediate&#x2F;Master&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Skill&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Example&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Comprehensive JS knowledge¬≥&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can solve any common problem in JS (when sensible), and I possess up-to-date knowledge of the latest &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Archive&#x2F;Web&#x2F;JavaScript&#x2F;ECMAScript_Next_support_in_Mozilla&quot;&gt;ECMAScript 20xx&lt;&#x2F;a&gt; features&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Front-end philosophy&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I have cursory-to-advanced knowledge of how strategies like &lt;a href=&quot;https:&#x2F;&#x2F;xstate.js.org&#x2F;&quot;&gt;State Machines&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.learnrxjs.io&#x2F;&quot;&gt;Observables&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;design-principles.html&quot;&gt;Component-based architecture&lt;&#x2F;a&gt;, etc. solve different problems for building web applications&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Performance profiling&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand how to profile JavaScript‚Äôs performance, even moving operations &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;performance&#x2F;rendering&#x2F;optimize-javascript-execution&quot;&gt;off the main thread&lt;&#x2F;a&gt; where needed&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Inheritance and prototypes&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;Beyond data types, I understand JavaScript‚Äôs &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Inheritance_and_the_prototype_chain&quot;&gt;prototypal inheritance&lt;&#x2F;a&gt; design&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Type System&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand JavaScript‚Äôs type system and &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Glossary&#x2F;Type_coercion&quot;&gt;coercion&lt;&#x2F;a&gt;, and know how best to leverage it (and potentially possess TypeScript knowledge)&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Testing&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I ensure all JavaScript is tested, whether with &lt;a href=&quot;https:&#x2F;&#x2F;jestjs.io&#x2F;&quot;&gt;unit &#x2F; E2E&lt;&#x2F;a&gt; tests, &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;tools&#x2F;puppeteer&#x2F;&quot;&gt;headless browser tests&lt;&#x2F;a&gt;, or &lt;a href=&quot;https:&#x2F;&#x2F;happo.io&#x2F;&quot;&gt;VRT&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Advanced network knowledge¬π&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I have comprehensive strategies for consuming API data and feel comfortable using client like &lt;a href=&quot;https:&#x2F;&#x2F;www.apollographql.com&#x2F;&quot;&gt;Apollo&lt;&#x2F;a&gt; or rolling my own.&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;DOM manipulation¬π&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand JavaScript‚Äôs role in DOM manipulation, and strategies for managing this such as &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;design-principles.html&quot;&gt;React&lt;&#x2F;a&gt; (related to Camp 1)&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;WebAssembly&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand how JavaScript interops with &lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WebAssembly&lt;&#x2F;a&gt; and know when to leverage it&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;em&gt;¬π related to I &#x2F; ¬≥ related to III&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In JavaScript‚Äôs strange, strange development, something very weird happened that few could have
predicted: &lt;em&gt;JavaScript turned into a backend language with Node.js.&lt;&#x2F;em&gt; This not only changed how we
&lt;em&gt;prepared&lt;&#x2F;em&gt; JavaScript for the browser (Camp 1); it also changed how we wrote it (Camp 2).&lt;&#x2F;p&gt;
&lt;p&gt;Let‚Äôs be clear: &lt;em&gt;Node.js is a backend language.&lt;&#x2F;em&gt; In this post we‚Äôre not talking about the backend,
but we can‚Äôt deny that Node.js has changed the front-end ecosystem forever with advanced tooling to
npm. And this knowledge makes up the final area.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;construction-worker-iii-the-toolchain-node-js-npm-babel-bundlers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#construction-worker-iii-the-toolchain-node-js-npm-babel-bundlers&quot; aria-label=&quot;Anchor link for: construction-worker-iii-the-toolchain-node-js-npm-babel-bundlers&quot;&gt;üîó&lt;&#x2F;a&gt;üë∑‚Äç‚ôÄÔ∏è III: The Toolchain (Node.js, npm, Babel, bundlers)&lt;&#x2F;h2&gt;
&lt;p&gt;The final area of expertise is one you won‚Äôt see outlined often, if at all, as separate from JS
(II). It likely got lumped in with the ‚ÄúJS devs‚Äù¬†in &lt;em&gt;The Great Divide&lt;&#x2F;em&gt; post. Though it seems like a
part of JS, the toolchain is more ‚Äúmeta‚Äù, and its concern more aligns with: &lt;strong&gt;Can the way we develop
web applications be improved?&lt;&#x2F;strong&gt; and it‚Äôs given rise to &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Guide&#x2F;Modules&quot;&gt;module systems&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;&quot;&gt;package
managers&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;babeljs.io&#x2F;&quot;&gt;transpilers&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Guide&#x2F;Modules&quot;&gt;bundlers&lt;&#x2F;a&gt;, and even &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;introducing-jsx.html&quot;&gt;new languages&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So while web dev today is largely JS, thus explaining the confusion between II and III, perhaps it
won‚Äôt be for long with things like &lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WebAssembly&lt;&#x2F;a&gt; on the rise. And you can contribute to the
toolchain without being a JS dev whatsoever (for example, though Babel is central to JS dev these
days, Babel plugins themselves apply generic principles of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Abstract_syntax_tree&quot;&gt;AST&lt;&#x2F;a&gt;s that apply to any language,
and nothing about it is uniquely JS other than the syntax used to write it).&lt;&#x2F;p&gt;
&lt;p&gt;This area of knowledge is also hard to outline because by its nature it questions the ontology of
front-end development. But it‚Äôs also the most powerful because it has the ability to transform how
we work. And as it also requires at least an intermediate understanding of &lt;em&gt;some&lt;&#x2F;em&gt; programming
language (even if not JS), the ‚ÄúBeginner‚Äù section was omitted entirely here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;intermediate-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#intermediate-1&quot; aria-label=&quot;Anchor link for: intermediate-1&quot;&gt;üîó&lt;&#x2F;a&gt;Intermediate&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Skill&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Example&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Configuration&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can configure a local development without a boilerplate, working directly with tools like Gulp, webpack, and Parcel&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Transpilation¬π&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can configure Babel and PostCSS to transpile code for specific targets&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Bundling &amp;amp; optimization¬≤&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can set up build pipelines to ship production-ready code and optimize delivery of those bundles&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Advanced npm&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I‚Äôve deployed my own packages to npm&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;master-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#master-1&quot; aria-label=&quot;Anchor link for: master-1&quot;&gt;üîó&lt;&#x2F;a&gt;Master&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Skill&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Example&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Architect&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can build front-end boilerplates for other people to use&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;AST understanding&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can create my own &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamiebuilds&#x2F;babel-handbook&#x2F;blob&#x2F;master&#x2F;translations&#x2F;en&#x2F;plugin-handbook.md&quot;&gt;Babel&lt;&#x2F;a&gt; or ESLint plugins&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Bundler understanding&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can create my own webpack plugins&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Code Generation&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I can generate JS programatically&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;CI¬≤&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I create automated pipelines for deploying npm packages as well as shipping optimized bundles to production&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Ecosystem understanding&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;em&gt;I understand how to deploy npm packages for Node.js, web browsers, and CLI tools, and how to target each&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;em&gt;¬π related to I &#x2F; ¬≤ related to II&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Usually when complaints arise about the state of front-end development, whether that‚Äôs how much it‚Äôs
changed, or if it‚Äôs too complicated, usually JavaScript gets the blame when really it‚Äôs the
toolchain. Of course, this is confusing, since JavaScript is both the engine that runs the toolchain
(Node.js) and the input&#x2F;output of the toolchain itself (browser JS).&lt;&#x2F;p&gt;
&lt;p&gt;This is also the area of expertise that‚Äôs undergone the biggest changes of front-end development,
and it won‚Äôt be settling any time soon. Still, now‚Äôs the perfect time to jump in and contribute
&lt;em&gt;because&lt;&#x2F;em&gt; all these things aren‚Äôt settled yet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-final-note-on-mastery&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-final-note-on-mastery&quot; aria-label=&quot;Anchor link for: a-final-note-on-mastery&quot;&gt;üîó&lt;&#x2F;a&gt;A final note on mastery&lt;&#x2F;h2&gt;
&lt;p&gt;Recently, a coworker used the term ‚ÄúPlatypus‚Äù to refer to an engineering problem which is difficult
to classify (obviously based off an animal that lays eggs, is aquatic, has fur, and poison), and I
love that. He didn‚Äôt remember the origin (and I Googling it only gave me the results you might
expect), so I apologize for not being able to source this (if you know where this originates from
please contact me).&lt;&#x2F;p&gt;
&lt;p&gt;In a similar vein, you probably you noticed the superscript ¬πs, ¬≤s, and ¬≥s linking skills in one
area to another. This is a natural failing of any taxonomic system to be perfect. While there‚Äôs
always overlap, there‚Äôs still enough net value to drawing lines that it‚Äôs worth doing.&lt;&#x2F;p&gt;
&lt;p&gt;Mastery of any of these areas is a slippery thing, too. I‚Äôm reminded of Matt Might‚Äôs post, &lt;a href=&quot;http:&#x2F;&#x2F;matt.might.net&#x2F;articles&#x2F;phd-school-in-pictures&#x2F;&quot;&gt;&lt;em&gt;The
illustrated guide to a Ph.D.&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; To merely reach the limits of human knowledge is not enough;
we‚Äôre all pushing to try and make that little ‚Äúdent‚Äù in the shape of what‚Äôs possible. And with that
act, we leave behind a bigger world to explore for the next generation.&lt;&#x2F;p&gt;
&lt;p&gt;Even theoretically if you could master something, it would only last for a short time until someone
came along and changed what‚Äôs possible with their dent. And I can‚Äôt say this enough: &lt;strong&gt;the internet
is a fledgeling industry&lt;&#x2F;strong&gt;. We‚Äôre still figuring everything out.&lt;&#x2F;p&gt;
&lt;p&gt;Above all else, &lt;strong&gt;be kind to yourself,&lt;&#x2F;strong&gt; and pursue mastery only to the extent it‚Äôs rewarding for
you and others around you. And if you do write an ‚Äúus vs them‚Äù post, write it with the intent of
unifying, not dividing. God knows we have too much division going on as it is.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>media queries are (still) a¬†hack</title>
		<published>2020-01-18T00:00:00+00:00</published>
		<updated>2020-01-18T00:00:00+00:00</updated>
		<link href="https://pow.rs/blog/media-queries-are-still-a-hack/" type="text/html"/>
		<id>https://pow.rs/blog/media-queries-are-still-a-hack/</id>
		<content type="html">&lt;p&gt;After 15 years of working with CSS, media queries still don‚Äôt do enough for me to create responsive
designs. To express my frustrations, I had written about half of a blog post under the title &lt;em&gt;Media
Queries are a Hack&lt;&#x2F;em&gt; before I discovered &lt;a href=&quot;https:&#x2F;&#x2F;ianstormtaylor.com&#x2F;media-queries-are-a-hack&#x2F;&quot;&gt;that title had been taken&lt;&#x2F;a&gt;. In &lt;strong&gt;2013&lt;&#x2F;strong&gt;. Clearly I‚Äôm
not as original as I think I am.&lt;&#x2F;p&gt;
&lt;p&gt;Ian Storm Taylor, the author of that post, summarizes the major failing of media queries:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want &lt;strong&gt;write-once, use-anywhere&lt;&#x2F;strong&gt;‚Äîthat‚Äôs what modular code is.&lt;&#x2F;p&gt;
&lt;p&gt;Media queries are not that. They‚Äôre &lt;strong&gt;write-everywhere&lt;&#x2F;strong&gt;. They‚Äôre relative to your screen, so
every time you write a media query for max-width or min-width, you‚Äôre connecting the appearance of
your module to the width of the entire canvas‚Äîexactly what you were trying to avoid.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This has only become more true and more of a problem in our React-influenced,
&lt;em&gt;everything-is-modular&lt;&#x2F;em&gt; landscape of contemporary web design. And this lack of component-oriented
thinking lead Ian to pine for what we all do‚ÄîContainer Queries.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;container-queries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#container-queries&quot; aria-label=&quot;Anchor link for: container-queries&quot;&gt;üîó&lt;&#x2F;a&gt;container queries?&lt;&#x2F;h2&gt;
&lt;p&gt;If, for example, I have a user card component that I want to rearrange when there‚Äôs not enough room,
I can only do that based on the browser width, &lt;strong&gt;not the component width itself.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;posts&#x2F;media-queries-are-still-a-hack&#x2F;user-cards.svg&quot; alt=&quot;A horizontally-laid out user card next to a vertical one&quot; &#x2F;&gt;
  &lt;figcaption&gt;What if I wanted to stack a card vertically not based on screen width, but based on whether or not the text and image will fit side-by-side? In 2020, I still can‚Äôt.&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Container Queries seem to check off all the boxes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;‚úÖ Modular and composable&lt;&#x2F;li&gt;
&lt;li&gt;‚úÖ Attack the root problem of responsive design: resizing based on &lt;strong&gt;content&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;‚úÖ CSS-based&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But perfect as they may be, Container Queries are not happening anytime soon. In Zach Leatherman‚Äôs
recent article &lt;a href=&quot;https:&#x2F;&#x2F;www.zachleat.com&#x2F;web&#x2F;origin-container-queries&#x2F;&quot;&gt;&lt;em&gt;The Origin Story of Container Queries&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, after much research, he even admits
the grim reality of our beloved Container Queries:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Container Queries] become almost clich√© to mention it when talking about problems we‚Äôd like the
web platform to solve‚Ä¶ Everyone wants it, but it sure seems like no one is actively working on it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So what‚Äôs a person to do?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;css-grid-repeat-auto-fit-minmax&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#css-grid-repeat-auto-fit-minmax&quot; aria-label=&quot;Anchor link for: css-grid-repeat-auto-fit-minmax&quot;&gt;üîó&lt;&#x2F;a&gt;css grid repeat(auto-fit, minmax())?&lt;&#x2F;h2&gt;
&lt;p&gt;If you‚Äôve used CSS Grid, you may be familiar with this wonderful snippet:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;grid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
  display: grid;
  grid-gap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
  grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(auto-fit, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;minmax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;300px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I was first introduced to this by &lt;a href=&quot;https:&#x2F;&#x2F;labs.jensimmons.com&#x2F;2017&#x2F;03-009.html&quot;&gt;Jen Simmons&lt;&#x2F;a&gt;‚Äô wonderful demo. With only 3 lines of CSS, we
have something that used to take hundreds:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Responsive without any media queries&lt;&#x2F;li&gt;
&lt;li&gt;Gutters built-in üòç&lt;&#x2F;li&gt;
&lt;li&gt;And last, but most importantly, &lt;strong&gt;items that resize based on their width&lt;&#x2F;strong&gt; (kinda sounds like
Container Queries, don‚Äôt it?)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But despite being incredibly-useful, CSS Grid‚Äôs &lt;code&gt;repeat(auto-fit, minmax())&lt;&#x2F;code&gt; has 2 major drawbacks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;üö´ It can‚Äôt be used on the component level like a Container Query could, so components can‚Äôt
declare their own widths and breakpoints; their parents must.&lt;&#x2F;li&gt;
&lt;li&gt;üö´ It doesn‚Äôt allow for columns of different widths. Neither can you tell items to responsively
span multiple columns without media queries (and if we‚Äôre using media queries we‚Äôre all the way
back to where we started).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;container-queries-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#container-queries-1&quot; aria-label=&quot;Anchor link for: container-queries-1&quot;&gt;üîó&lt;&#x2F;a&gt;container queries.&lt;&#x2F;h2&gt;
&lt;p&gt;It‚Äôs really hard to make a better pitch than Container Queries as a solution to the problem of
modular responsive design, after &lt;strong&gt;7 years&lt;&#x2F;strong&gt; and hundreds of great minds have all shared their
collective vision of how this holy-grail-of-a-CSS-selector should work. There are no downsides to
Container Queries, other than the belabored point that &lt;em&gt;they don‚Äôt exist&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So in parting, as I alluded to earlier, I will leave you, dear reader, with nary an original
thought, instead, rehashing my favorite line from Phillip Walton‚Äôs well-referenced &lt;a href=&quot;https:&#x2F;&#x2F;philipwalton.com&#x2F;articles&#x2F;responsive-components-a-solution-to-the-container-queries-problem&#x2F;&quot;&gt;&lt;em&gt;Responsive
Components: A Solution to the Container Queries Problem&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;While I think we‚Äôd all agree a pure CSS solution is the ultimate goal, I hope we as a community
are able prevent the perfect from becoming the enemy of the good.&lt;&#x2F;p&gt;
&lt;p&gt;In matters like this, I like to remind myself of this quote from the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html-design-principles&#x2F;&quot;&gt;W3C‚Äôs HTML design
principles&lt;&#x2F;a&gt;: ‚ÄúIn case of conflict, consider users over authors over implementors over
specifiers over theoretical purity.‚Äù&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In other words, in 2020, &lt;strong&gt;the best solution we have to media queries‚Äô failings is JavaScript.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;But not JavaScript for the sake of JavaScript; JavaScript for the sake of users.&lt;&#x2F;p&gt;
&lt;p&gt;It‚Äôs been 7 years since Ian Storm Taylor published &lt;em&gt;Media Queries are a Hack&lt;&#x2F;em&gt;. And unfortunately, in
2020, they‚Äôre &lt;em&gt;still&lt;&#x2F;em&gt; a hack. And we‚Äôre still waiting on Container Queries.&lt;&#x2F;p&gt;
&lt;p&gt;I may not have any original ideas on this subject, but at least we‚Äôre all on the same page.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-reading&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-reading&quot; aria-label=&quot;Anchor link for: more-reading&quot;&gt;üîó&lt;&#x2F;a&gt;more reading&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ianstormtaylor.com&#x2F;media-queries-are-a-hack&#x2F;&quot;&gt;Media Queries are a Hack&lt;&#x2F;a&gt; (the real one)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;philipwalton.com&#x2F;articles&#x2F;responsive-components-a-solution-to-the-container-queries-problem&#x2F;&quot;&gt;Responsive Components: A Solution to the Container Queries Problem&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;css-tricks.com&#x2F;lets-not-forget-about-container-queries&#x2F;&quot;&gt;Let‚Äôs Not Forget About Container Queries&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zachleat.com&#x2F;web&#x2F;origin-container-queries&#x2F;&quot;&gt;The Origin Story of Container Queries&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
